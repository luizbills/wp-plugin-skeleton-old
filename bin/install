#!/usr/bin/env php
<?php

$is_test = in_array( '--test', $argv );
$defaults = [
	'Version' => '1.0.0',
];
$values = null;
$ready = false;
$prompts = [
	'Plugin Name' => '(e.g. Awesome Plugin)',
	'Plugin Description' => '(e.g. Just another plugin)',
	'Plugin Author' => '(e.g. Luiz Bills)',
	'Plugin Author URL' => '(e.g. luizpb.com)',
	'Plugin Text Domain' => '(e.g. awesome-plugin)',
	'PHP Namespace' => '(e.g. luizbills\AwesomePlugin)',
	'Version' => '[1.0.0]',
];

// auto fill if has `--test` option
if ( $is_test ) {
	$ready = true;
	$values = [
		'Plugin Name' => 'Skeleton Dev Plugin',
		'Plugin Description' => 'Use this plugin to test the wp-plugin-skeleton boilerplate',
		'Plugin Author' => 'An Awesome Contribuitor',
		'Plugin Author URL' => 'https://github.com/luizbills/wp-plugin-skeleton',
		'Plugin Text Domain' => 'skeleton-dev-plugin',
		'PHP Namespace' => 'Skeleton\DevPlugin',
		'Version' => date( 'Y-m-d @ H:m:s' ),
	];
}

// get some plugin informations
while ( ! $ready ) {
	$values = [];

	foreach ( $prompts as $var => $desc ) {
		$value = '';
		while ( empty( $value ) ) {
			cls();
			$value = readline( "$var $desc: " );
			if ( empty( $value ) && isset( $defaults[ $var ] ) ) {
				$value = $defaults[ $var ];
			}
		}
		$values[ $var ] = $value;
	}

	if ( empty( $values['Version'] ) ) {
		$values['Version'] = '1.0.0';
	}

	cls();

	foreach ( $values as $key => $value ) {
		echo "$key: $value\n\r";
	}

	// give the user a chance to fix the informations
	$confirm = strtolower( readline( 'Is it OK? [Y/n] ' ) );

	$ready = '' === $confirm || 'y' === $confirm;
}

cls();

// placeholders to find and to replace
$find = [
	'{{namespace}}',
	'{{composer_namespace}}',
	'{{plugin_name}}',
	'{{plugin_description}}',
	'{{plugin_author}}',
	'{{plugin_author_uri}}',
	'{{plugin_text_domain}}',
	'{{plugin_version}}',
];
$replace = [
	$values['PHP Namespace'],
	str_replace('\\', '\\\\', $values['PHP Namespace'] ) . '\\\\',
	$values['Plugin Name'],
	$values['Plugin Description'],
	$values['Plugin Author'],
	substr( $values['Plugin Author URL'], 0, 4 ) === 'http' ? $values['Plugin Author URL'] : 'https://' . $values['Plugin Author URL'],
	$values['Plugin Text Domain'],
	$values['Version'],
];

// list of files and folders
$files = [
	'' => [
		'.gitignore',
		'composer.json',
		'LICENSE',
		'main.php',
		'plugin.yml',
	],
	'assets/js' => [
		'demo.js',
	],
	'assets/css' => [
		'demo.css',
	],
	'assets/images' => [
		'.gitkeep',
	],
	'classes' => [
		'Demo.php',
		'Logger.php',
	],
	'classes/Core' => [
		'Config.php',
		'Plugin.php',
	],
	'classes/Utils' => [
		'Data_Store.php',
		'Immutable_Data_Store.php',
		'Asset_Manager.php',
	],
	'classes/Common' => [
		'Abstract_Hooker.php',
	],
	'includes' => [
		'helpers.php',
		'hooks.php',
		'index.php',
	],
	'includes/helpers' => [
		'cache.php',
		'config.php',
		'file.php',
		'logger.php',
		'post.php',
		'slug.php',
		'template.php',
		'user.php',
	],
	'languages' => [
		'.gitkeep'
	],
	'templates' => [
		'admin-notice.php',
	],
];

// create all files and folders
$folder_name = slugify( $values['Plugin Name'] );
$root = dirname( __DIR__ );
$target_dir = dirname( $root ) . "/$folder_name";

if ( ! file_exists( $target_dir ) ) {
	mkdir( $target_dir, 0755 );
} else {
	if ( $is_test && file_exists( "$target_dir/.wp-plugin-skeleton-test" ) ) {
		$tmp_vendor = null;
		if ( file_exists( "$target_dir/vendor" ) ) {
			$tmp_vendor = md5( time() );
			rename( "$target_dir/vendor", dirname( $target_dir ) . "/$tmp_vendor" );
		}

		rrmdir( $target_dir );
		mkdir( $target_dir, 0755 );

		if ( null !== $tmp_vendor ) {
			rename( dirname( $target_dir ) . "/$tmp_vendor", "$target_dir/vendor" );
		}
	} else {
		echo "\"$target_dir\" already exists. Aborting..." . PHP_EOL;
		exit(1);
	}
}

chdir( $target_dir );

if ( $is_test && file_exists( $root . "/src/includes/dev.php" ) ) {
	$files['includes'][] = 'dev.php';
}

foreach ( $files as $dir => $contents ) {
	if ( ! empty( $dir ) ) {
		mkdir( "$target_dir/$dir", 0755, true );
	}

	foreach ( $contents as $file ) {
		$file_content = '.gitkeep' !== $file ? file_get_contents( $root . "/src/$dir/$file" ) : '';
		$file_content = '.gitkeep' !== $file ? str_replace( $find, $replace, $file_content) : '';

		// find and replace the placeholders
		file_put_contents( "$target_dir/$dir/$file", $file_content );
	}
}

if ( $is_test ) {
	file_put_contents( "$target_dir/.wp-plugin-skeleton-test", '' );

	if ( file_exists( $root . "/src/includes/dev.php" ) ) {
		$append_to = "$target_dir/includes/index.php";
		$file_content = file_get_contents( $append_to );
		$file_content .= PHP_EOL . "require_once 'dev.php';";

		file_put_contents( $append_to, $file_content );
	}
}

// install dependencies via composer
chdir( $target_dir );
echo shell_exec( 'composer update' );

// save the plugin folder name in a temporary file
if ( ! $is_test ) {
	file_put_contents( dirname( $root ) . '/.tmp_wp_plugin_dir', $folder_name );
}

cls();
echo "The plugin was successfully created in $target_dir" . PHP_EOL . PHP_EOL;

# Helpers
function slugify ( $text ) {
	$sanitized_text = remove_accents( $text ); // Convert to ASCII
	$invalid = [
		' ' => '-',
		'_' => '-',
	];
	$sanitized_text = str_replace( array_keys( $invalid ), array_values( $invalid ), $sanitized_text );
	$sanitized_text = preg_replace( '/[^A-Za-z0-9- ]/', '', $sanitized_text ); // Remove all non-alphanumeric except .
	$sanitized_text = preg_replace( '/-+/', '-', $sanitized_text ); // Replace any more than one - in a row
	$sanitized_text = preg_replace( '/-$/', '', $sanitized_text ); // Remove last - if at the end
	$sanitized_text = strtolower( $sanitized_text ); // Lowercase

	return $sanitized_text;
}

function cls () {
	print( "\033[2J\033[;H" );
}

// recursive rmdir
function rrmdir ( $src ) {
	$dir = opendir($src);
	while(false !== ( $file = readdir($dir)) ) {
		if (( $file != '.' ) && ( $file != '..' )) {
			$full = $src . '/' . $file;
			if ( is_dir($full) ) {
				rrmdir($full);
			}
			else {
				unlink($full);
			}
		}
	}
	closedir($dir);
	rmdir($src);
}

function remove_accents ( $str ) {
	$search = explode( "," , "ç,æ,œ,á,é,í,ó,ú,à,è,ì,ò,ù,ä,ë,ï,ö,ü,ÿ,â,ê,î,ô,û,å,ø,Ø,Å,Á,À,Â,Ä,È,É,Ê,Ë,Í,Î,Ï,Ì,Ò,Ó,Ô,Ö,Ú,Ù,Û,Ü,Ÿ,Ç,Æ,Œ" );
	$replace = explode( "," , "c,ae,oe,a,e,i,o,u,a,e,i,o,u,a,e,i,o,u,y,a,e,i,o,u,a,o,O,A,A,A,A,A,E,E,E,E,I,I,I,I,O,O,O,O,U,U,U,U,Y,C,AE,OE" );
	return str_replace( $search, $replace, $str );
}
